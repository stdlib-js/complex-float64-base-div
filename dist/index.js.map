{
  "version": 3,
  "sources": ["../lib/internal_compreal.js", "../lib/robust_internal.js", "../lib/assign.js", "../lib/main.js", "../lib/strided.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the real part of the quotient.\n*\n* ## Notes\n*\n* -   See figure 10 of [Baudin (2012)][@baudin:2012].\n*\n* [@baudin:2012]: https://arxiv.org/abs/1210.4539\n*\n* @private\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n* @param {number} r - partial result\n* @param {number} t - partial result\n* @returns {number} real part of the quotient\n*/\nfunction internalCompreal( re1, im1, re2, im2, r, t ) {\n\tvar br;\n\tif ( r === 0.0 ) {\n\t\treturn ( re1 + (im2 * (im1/re2)) ) * t;\n\t}\n\tbr = im1 * r;\n\tif ( br === 0.0 ) {\n\t\treturn ( re1*t ) + ( (im1*t) * r );\n\t}\n\treturn ( re1+br ) * t;\n}\n\n\n// EXPORTS //\n\nmodule.exports = internalCompreal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar internalCompreal = require( './internal_compreal.js' );\n\n\n// MAIN //\n\n/**\n* Computes the complex division.\n*\n* ## Notes\n*\n* -   See figure 10 of [reference][@baudin:2012].\n*\n* [@baudin:2012]: https://arxiv.org/abs/1210.4539\n*\n* @private\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n* @returns {Array<number>} result\n*/\nfunction robustInternal( re1, im1, re2, im2 ) {\n\tvar out;\n\tvar r;\n\tvar t;\n\n\tout = [ 0.0, 0.0 ];\n\tr = im2 / re2;\n\tt = 1.0 / ( re2 + (im2*r) );\n\n\tout[ 0 ] = internalCompreal( re1, im1, re2, im2, r, t );\n\tout[ 1 ] = internalCompreal( im1, -re1, re2, im2, r, t );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = robustInternal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar FLOAT64_BIGGEST = require( '@stdlib/constants-float64-max' );\nvar FLOAT64_SMALLEST = require( '@stdlib/constants-float64-smallest-normal' );\nvar EPS = require( '@stdlib/constants-float64-eps' );\nvar robustInternal = require( './robust_internal.js' );\n\n\n// VARIABLES //\n\nvar LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;\nvar SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );\nvar RECIP_EPS_SQR = 2.0 / ( EPS * EPS );\n\n\n// MAIN //\n\n/**\n* Divides two double-precision complex floating-point numbers and assigns results to a provided output array.\n*\n* @param {number} re1 - real component of the first complex number\n* @param {number} im1 - imaginary component of the first complex number\n* @param {number} re2 - real component of the second complex number\n* @param {number} im2 - imaginary component of the second complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var out = assign( -13.0, -1.0, -2.0, 1.0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 5.0, 3.0 ]\n*/\nfunction assign( re1, im1, re2, im2, out, strideOut, offsetOut ) {\n\tvar res;\n\tvar ab;\n\tvar cd;\n\tvar s;\n\n\tab = max( abs(re1), abs(im1) );\n\tcd = max( abs(re2), abs(im2) );\n\ts = 1.0;\n\n\tif ( ab >= LARGE_THRESHOLD ) {\n\t\tre1 *= 0.5;\n\t\tim1 *= 0.5;\n\t\ts *= 2.0;\n\t} else if ( ab <= SMALL_THRESHOLD ) {\n\t\tre1 *= RECIP_EPS_SQR;\n\t\tim1 *= RECIP_EPS_SQR;\n\t\ts /= RECIP_EPS_SQR;\n\t}\n\tif ( cd >= LARGE_THRESHOLD ) {\n\t\tre2 *= 0.5;\n\t\tim2 *= 0.5;\n\t\ts *= 0.5;\n\t} else if ( cd <= SMALL_THRESHOLD ) {\n\t\tre2 *= RECIP_EPS_SQR;\n\t\tim2 *= RECIP_EPS_SQR;\n\t\ts *= RECIP_EPS_SQR;\n\t}\n\n\tif ( abs( im2 ) <= abs( re2 ) ) {\n\t\tres = robustInternal( re1, im1, re2, im2 );\n\t} else {\n\t\tres = robustInternal( im1, re1, im2, re2 );\n\t\tres[ 1 ] *= -1.0;\n\t}\n\n\tres[ 0 ] *= s;\n\tres[ 1 ] *= s;\n\n\tout[ offsetOut ] = res[ 0 ];\n\tout[ offsetOut+strideOut ] = res[ 1 ];\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar real = require( '@stdlib/complex-float64-real' );\nvar imag = require( '@stdlib/complex-float64-imag' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar Complex128 = require( '@stdlib/complex-float64-ctor' );\nvar assign = require( './assign.js' );\n\n\n// VARIABLES //\n\nvar out = new Float64Array( 2 );\n\n\n// MAIN //\n\n/**\n* Divides two double-precision complex floating-point numbers.\n*\n* ## References\n*\n* -   Baudin, Michael, and Robert L. Smith. 2012. \"A Robust Complex Division in Scilab.\" _arXiv_ abs/1210.4539 \\[cs.MS\\] (October): 1\u201325. <https://arxiv.org/abs/1210.4539>.\n*\n* @param {Complex128} z1 - complex number\n* @param {Complex128} z2 - complex number\n* @returns {Complex128} result\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n*\n* var z1 = new Complex128( -13.0, -1.0 );\n* var z2 = new Complex128( -2.0, 1.0 );\n*\n* var out = cdiv( z1, z2 );\n* // returns <Complex128>[ 5.0, 3.0 ]\n*/\nfunction cdiv( z1, z2 ) {\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\n\tre1 = real( z1 );\n\tre2 = real( z2 );\n\tim1 = imag( z1 );\n\tim2 = imag( z2 );\n\n\tout = assign( re1, im1, re2, im2, out, 1, 0 );\n\n\treturn new Complex128( out[ 0 ], out[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdiv;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Divides two double-precision complex floating-point numbers stored in real-valued strided array views and assigns results to a provided strided output array.\n*\n* @param {Float64Array} z1 - first complex number view\n* @param {integer} strideZ1 - stride length for `z1`\n* @param {NonNegativeInteger} offsetZ1 - starting index for `z1`\n* @param {Float64Array} z2 - second complex number view\n* @param {integer} strideZ2 - stride length for `z2`\n* @param {NonNegativeInteger} offsetZ2 - starting index for `z2`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* var z1 = new Float64Array( [ -13.0, -1.0 ] );\n* var z2 = new Float64Array( [ -2.0, 1.0 ] );\n*\n* var out = strided( z1, 1, 0, z2, 1, 0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 5.0, 3.0 ]\n*/\nfunction strided( z1, strideZ1, offsetZ1, z2, strideZ2, offsetZ2, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\treturn assign( z1[ offsetZ1 ], z1[ offsetZ1+strideZ1 ], z2[ offsetZ2 ], z2[ offsetZ2+strideZ2 ], out, strideOut, offsetOut ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = strided;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Divide two double-precision complex floating-point numbers.\n*\n* @module @stdlib/complex-float64-base-div\n*\n* @example\n* var Complex128 = require( '@stdlib/complex-float64-ctor' );\n* var cdiv = require( '@stdlib/complex-float64-base-div' );\n*\n* var z1 = new Complex128( -13.0, -1.0 );\n* var z2 = new Complex128( -2.0, 1.0 );\n*\n* var out = cdiv( z1, z2 );\n* // returns <Complex128>[ 5.0, 3.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\nvar strided = require( './strided.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n"],
  "mappings": "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",
  "names": ["require_internal_compreal", "__commonJSMin", "exports", "module", "internalCompreal", "re1", "im1", "re2", "im2", "r", "t", "br", "require_robust_internal", "__commonJSMin", "exports", "module", "internalCompreal", "robustInternal", "re1", "im1", "re2", "im2", "out", "r", "require_assign", "__commonJSMin", "exports", "module", "abs", "max", "FLOAT64_BIGGEST", "FLOAT64_SMALLEST", "EPS", "robustInternal", "LARGE_THRESHOLD", "SMALL_THRESHOLD", "RECIP_EPS_SQR", "assign", "re1", "im1", "re2", "im2", "out", "strideOut", "offsetOut", "res", "ab", "cd", "s", "require_main", "__commonJSMin", "exports", "module", "real", "imag", "Float64Array", "Complex128", "assign", "out", "cdiv", "z1", "z2", "re1", "re2", "im1", "im2", "require_strided", "__commonJSMin", "exports", "module", "assign", "strided", "z1", "strideZ1", "offsetZ1", "z2", "strideZ2", "offsetZ2", "out", "strideOut", "offsetOut", "setReadOnly", "main", "assign", "strided"]
}
