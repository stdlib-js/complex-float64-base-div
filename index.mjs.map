{"version":3,"file":"index.mjs","sources":["../lib/internal_compreal.js","../lib/robust_internal.js","../lib/assign.js","../lib/main.js","../lib/strided.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the real part of the quotient.\n*\n* ## Notes\n*\n* -   See figure 10 of [Baudin (2012)][@baudin:2012].\n*\n* [@baudin:2012]: https://arxiv.org/abs/1210.4539\n*\n* @private\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n* @param {number} r - partial result\n* @param {number} t - partial result\n* @returns {number} real part of the quotient\n*/\nfunction internalCompreal( re1, im1, re2, im2, r, t ) {\n\tvar br;\n\tif ( r === 0.0 ) {\n\t\treturn ( re1 + (im2 * (im1/re2)) ) * t;\n\t}\n\tbr = im1 * r;\n\tif ( br === 0.0 ) {\n\t\treturn ( re1*t ) + ( (im1*t) * r );\n\t}\n\treturn ( re1+br ) * t;\n}\n\n\n// EXPORTS //\n\nexport default internalCompreal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport internalCompreal from './internal_compreal.js';\n\n\n// MAIN //\n\n/**\n* Computes the complex division.\n*\n* ## Notes\n*\n* -   See figure 10 of [reference][@baudin:2012].\n*\n* [@baudin:2012]: https://arxiv.org/abs/1210.4539\n*\n* @private\n* @param {number} re1 - real component\n* @param {number} im1 - imaginary component\n* @param {number} re2 - real component\n* @param {number} im2 - imaginary component\n* @returns {Array<number>} result\n*/\nfunction robustInternal( re1, im1, re2, im2 ) {\n\tvar out;\n\tvar r;\n\tvar t;\n\n\tout = [ 0.0, 0.0 ];\n\tr = im2 / re2;\n\tt = 1.0 / ( re2 + (im2*r) );\n\n\tout[ 0 ] = internalCompreal( re1, im1, re2, im2, r, t );\n\tout[ 1 ] = internalCompreal( im1, -re1, re2, im2, r, t );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default robustInternal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport abs from '@stdlib/math-base-special-abs';\nimport max from '@stdlib/math-base-special-max';\nimport FLOAT64_BIGGEST from '@stdlib/constants-float64-max';\nimport FLOAT64_SMALLEST from '@stdlib/constants-float64-smallest-normal';\nimport EPS from '@stdlib/constants-float64-eps';\nimport robustInternal from './robust_internal.js';\n\n\n// VARIABLES //\n\nvar LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;\nvar SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );\nvar RECIP_EPS_SQR = 2.0 / ( EPS * EPS );\n\n\n// MAIN //\n\n/**\n* Divides two double-precision complex floating-point numbers and assigns results to a provided output array.\n*\n* @param {number} re1 - real component of the first complex number\n* @param {number} im1 - imaginary component of the first complex number\n* @param {number} re2 - real component of the second complex number\n* @param {number} im2 - imaginary component of the second complex number\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length\n* @param {NonNegativeInteger} offsetOut - starting index\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var out = assign( -13.0, -1.0, -2.0, 1.0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 5.0, 3.0 ]\n*/\nfunction assign( re1, im1, re2, im2, out, strideOut, offsetOut ) {\n\tvar res;\n\tvar ab;\n\tvar cd;\n\tvar s;\n\n\tab = max( abs(re1), abs(im1) );\n\tcd = max( abs(re2), abs(im2) );\n\ts = 1.0;\n\n\tif ( ab >= LARGE_THRESHOLD ) {\n\t\tre1 *= 0.5;\n\t\tim1 *= 0.5;\n\t\ts *= 2.0;\n\t} else if ( ab <= SMALL_THRESHOLD ) {\n\t\tre1 *= RECIP_EPS_SQR;\n\t\tim1 *= RECIP_EPS_SQR;\n\t\ts /= RECIP_EPS_SQR;\n\t}\n\tif ( cd >= LARGE_THRESHOLD ) {\n\t\tre2 *= 0.5;\n\t\tim2 *= 0.5;\n\t\ts *= 0.5;\n\t} else if ( cd <= SMALL_THRESHOLD ) {\n\t\tre2 *= RECIP_EPS_SQR;\n\t\tim2 *= RECIP_EPS_SQR;\n\t\ts *= RECIP_EPS_SQR;\n\t}\n\n\tif ( abs( im2 ) <= abs( re2 ) ) {\n\t\tres = robustInternal( re1, im1, re2, im2 );\n\t} else {\n\t\tres = robustInternal( im1, re1, im2, re2 );\n\t\tres[ 1 ] *= -1.0;\n\t}\n\n\tres[ 0 ] *= s;\n\tres[ 1 ] *= s;\n\n\tout[ offsetOut ] = res[ 0 ];\n\tout[ offsetOut+strideOut ] = res[ 1 ];\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport real from '@stdlib/complex-float64-real';\nimport imag from '@stdlib/complex-float64-imag';\nimport Float64Array from '@stdlib/array-float64';\nimport Complex128 from '@stdlib/complex-float64-ctor';\nimport assign from './assign.js';\n\n\n// VARIABLES //\n\nvar out = new Float64Array( 2 );\n\n\n// MAIN //\n\n/**\n* Divides two double-precision complex floating-point numbers.\n*\n* ## References\n*\n* -   Baudin, Michael, and Robert L. Smith. 2012. \"A Robust Complex Division in Scilab.\" _arXiv_ abs/1210.4539 \\[cs.MS\\] (October): 1â€“25. <https://arxiv.org/abs/1210.4539>.\n*\n* @param {Complex128} z1 - complex number\n* @param {Complex128} z2 - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var z1 = new Complex128( -13.0, -1.0 );\n* var z2 = new Complex128( -2.0, 1.0 );\n*\n* var out = cdiv( z1, z2 );\n* // returns <Complex128>[ 5.0, 3.0 ]\n*/\nfunction cdiv( z1, z2 ) {\n\tvar re1;\n\tvar re2;\n\tvar im1;\n\tvar im2;\n\n\tre1 = real( z1 );\n\tre2 = real( z2 );\n\tim1 = imag( z1 );\n\tim2 = imag( z2 );\n\n\tout = assign( re1, im1, re2, im2, out, 1, 0 );\n\n\treturn new Complex128( out[ 0 ], out[ 1 ] );\n}\n\n\n// EXPORTS //\n\nexport default cdiv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Divides two double-precision complex floating-point numbers stored in real-valued strided array views and assigns results to a provided strided output array.\n*\n* @param {Float64Array} z1 - first complex number view\n* @param {integer} strideZ1 - stride length for `z1`\n* @param {NonNegativeInteger} offsetZ1 - starting index for `z1`\n* @param {Float64Array} z2 - second complex number view\n* @param {integer} strideZ2 - stride length for `z2`\n* @param {NonNegativeInteger} offsetZ2 - starting index for `z2`\n* @param {Collection} out - output array\n* @param {integer} strideOut - stride length for `out`\n* @param {NonNegativeInteger} offsetOut - starting index for `out`\n* @returns {Collection} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var z1 = new Float64Array( [ -13.0, -1.0 ] );\n* var z2 = new Float64Array( [ -2.0, 1.0 ] );\n*\n* var out = strided( z1, 1, 0, z2, 1, 0, new Float64Array( 2 ), 1, 0 );\n* // returns <Float64Array>[ 5.0, 3.0 ]\n*/\nfunction strided( z1, strideZ1, offsetZ1, z2, strideZ2, offsetZ2, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\treturn assign( z1[ offsetZ1 ], z1[ offsetZ1+strideZ1 ], z2[ offsetZ2 ], z2[ offsetZ2+strideZ2 ], out, strideOut, offsetOut ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default strided;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Divide two double-precision complex floating-point numbers.\n*\n* @module @stdlib/complex-float64-base-div\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import cdiv from '@stdlib/complex-float64-base-div';\n*\n* var z1 = new Complex128( -13.0, -1.0 );\n* var z2 = new Complex128( -2.0, 1.0 );\n*\n* var out = cdiv( z1, z2 );\n* // returns <Complex128>[ 5.0, 3.0 ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\nimport strided from './strided.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\nsetReadOnly( main, 'strided', strided );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"assign\": \"main.assign\", \"strided\": \"main.strided\" }\n"],"names":["internalCompreal","re1","im1","re2","im2","r","t","br","robustInternal","out","LARGE_THRESHOLD","FLOAT64_BIGGEST","SMALL_THRESHOLD","FLOAT64_SMALLEST","EPS","RECIP_EPS_SQR","assign","strideOut","offsetOut","res","ab","cd","s","max","abs","Float64Array","cdiv","z1","z2","real","imag","Complex128","strided","strideZ1","offsetZ1","strideZ2","offsetZ2","setReadOnly","main"],"mappings":";;y9BAwCA,SAASA,EAAkBC,EAAKC,EAAKC,EAAKC,EAAKC,EAAGC,GACjD,IAAIC,EACJ,OAAW,IAANF,GACKJ,EAAOG,GAAOF,EAAIC,IAAUG,EAG1B,KADZC,EAAKL,EAAMG,GAEDJ,EAAIK,EAASJ,EAAII,EAAKD,GAEvBJ,EAAIM,GAAOD,CACrB,CCPA,SAASE,EAAgBP,EAAKC,EAAKC,EAAKC,GACvC,IAAIK,EACAJ,EACAC,EAQJ,OAJAA,EAAI,GAAQH,EAAOC,GADnBC,EAAID,EAAMD,KADVM,EAAM,CAAE,EAAK,IAIR,GAAMT,EAAkBC,EAAKC,EAAKC,EAAKC,EAAKC,EAAGC,GACpDG,EAAK,GAAMT,EAAkBE,GAAMD,EAAKE,EAAKC,EAAKC,EAAGC,GAC9CG,CACR,CCvBA,IAAIC,EAAoC,GAAlBC,EAClBC,EAAkBC,GAAqB,EAAMC,GAC7CC,EAAgB,GAAQD,EAAMA,GAuBlC,SAASE,EAAQf,EAAKC,EAAKC,EAAKC,EAAKK,EAAKQ,EAAWC,GACpD,IAAIC,EACAC,EACAC,EACAC,EAsCJ,OApCAF,EAAKG,EAAKC,EAAIvB,GAAMuB,EAAItB,IACxBmB,EAAKE,EAAKC,EAAIrB,GAAMqB,EAAIpB,IACxBkB,EAAI,EAECF,GAAMV,GACVT,GAAO,GACPC,GAAO,GACPoB,GAAK,GACMF,GAAMR,IACjBX,GAAOc,EACPb,GAAOa,EACPO,GAAKP,GAEDM,GAAMX,GACVP,GAAO,GACPC,GAAO,GACPkB,GAAK,IACMD,GAAMT,IACjBT,GAAOY,EACPX,GAAOW,EACPO,GAAKP,GAGDS,EAAKpB,IAASoB,EAAKrB,GACvBgB,EAAMX,EAAgBP,EAAKC,EAAKC,EAAKC,IAErCe,EAAMX,EAAgBN,EAAKD,EAAKG,EAAKD,IAChC,KAAQ,EAGdgB,EAAK,IAAOG,EACZH,EAAK,IAAOG,EAEZb,EAAKS,GAAcC,EAAK,GACxBV,EAAKS,EAAUD,GAAcE,EAAK,GAE3BV,CACR,CCrEA,IAAIA,EAAM,IAAIgB,EAAc,GAyB5B,SAASC,EAAMC,EAAIC,GAClB,IAAI3B,EACAE,EACAD,EACAE,EASJ,OAPAH,EAAM4B,EAAMF,GACZxB,EAAM0B,EAAMD,GACZ1B,EAAM4B,EAAMH,GACZvB,EAAM0B,EAAMF,GAEZnB,EAAMO,EAAQf,EAAKC,EAAKC,EAAKC,EAAKK,EAAK,EAAG,GAEnC,IAAIsB,EAAYtB,EAAK,GAAKA,EAAK,GACvC,CCpBA,SAASuB,EAASL,EAAIM,EAAUC,EAAUN,EAAIO,EAAUC,EAAU3B,EAAKQ,EAAWC,GACjF,OAAOF,EAAQW,EAAIO,GAAYP,EAAIO,EAASD,GAAYL,EAAIQ,GAAYR,EAAIQ,EAASD,GAAY1B,EAAKQ,EAAWC,EAClH,CCNAmB,EAAAC,EAAA,SAAAtB,GACAqB,EAAAC,EAAA,UAAAN"}